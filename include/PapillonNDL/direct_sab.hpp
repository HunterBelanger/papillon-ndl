/*
 * Papillon Nuclear Data Library
 * Copyright 2021-2023, Hunter Belanger
 *
 * hunter.belanger@gmail.com
 *
 * This file is part of the Papillon Nuclear Data Library (PapillonNDL).
 *
 * PapillonNDL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PapillonNDL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PapillonNDL. If not, see <https://www.gnu.org/licenses/>.
 *
 * */
#ifndef PAPILLON_NDL_DIRECT_SAB_H
#define PAPILLON_NDL_DIRECT_SAB_H

/**
 * @file
 * @author Hunter Belanger
 */

#include <PapillonNDL/ace.hpp>
#include <PapillonNDL/angle_energy.hpp>
#include <PapillonNDL/beta_alpha_table.hpp>
#include <PapillonNDL/pctable.hpp>
#include <optional>
#include <vector>

namespace pndl {

/**
 * @brief This class is used for the scattering distribution for incoherent
 *        inelastic scattering. It samples the S(a,b) parameters alpha and beta,
 *        and then converts these parameters to energy and scattering angle.
 *        This distribution is only provided with custom ACE files generated by
 *        Panglos.
 */
class DirectSab : public AngleEnergy {
 public:
  DirectSab(const ACE& ace);
  ~DirectSab() = default;

  AngleEnergyPacket sample_angle_energy(
      double E_in, const std::function<double()>& rng) const override final;

  std::optional<double> angle_pdf(double /*E_in*/,
                                  double /*mu*/) const override final {
    return std::nullopt;
  }

  std::optional<double> pdf(double /*E_in*/, double /*mu*/,
                            double /*E_out*/) const override final {
    return std::nullopt;
  }

  /**
   * @brief Returns a reference to the incident energy grid.
   */
  const std::vector<double>& incoming_energy() const {
    return incoming_energy_;
  }

  /**
   * @brief Returns the BetaAlphaTable instance for the ith beta point.
   * @param i Index to the beta point.
   */
  const BetaAlphaTable& table(std::size_t i) const { return beta_dists_[i]; }

  /**
   * @brief Returns the temperature for the distribution, in Kelvin.
   */
  double temperature() const;

  /**
   * @brief Returns the atomic weight ratio for the scattering nuclide.
   */
  double awr() const { return A_; }

  /**
   * @brief Returns the number of beta points.
   */
  std::size_t size() const { return incoming_energy_.size(); }

 private:
  std::vector<double> incoming_energy_;
  std::vector<BetaAlphaTable> beta_dists_;
  double kT_;  // Temperature in MeV
  double A_;   // Atomic weight ratio
};

}  // namespace pndl

#endif