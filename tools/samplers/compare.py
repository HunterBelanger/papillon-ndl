#!/usr/bin/python3
import os
import argparse
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import ks_2samp

def compare(energies, mus_ref, n_bins, title, labels, path):
    # get statistics
    text = [title]
    text.append("Mean; Uncertainty on the mean; Standard deviation")
    text.append(
        "Energy {} = {:5e} ; {:5e} ; {:5e}".format(
            labels[0],
            np.mean(energies[0]),
            np.std(energies[0]) / np.sqrt(float(len(energies[0]))),
            np.std(energies[0]),
        )
    )
    text.append(
        "Energy {} = {:5e} ; {:5e} ; {:5e}".format(
            labels[1],
            np.mean(energies[1]),
            np.std(energies[1]) / np.sqrt(float(len(energies[1]))),
            np.std(energies[1]),
        )
    )
    text.append(
        "Cosine {} = {:5e} ; {:5e} ; {:5e}".format(
            labels[0],
            np.mean(mus_ref[0]),
            np.std(mus_ref[0]) / np.sqrt(float(len(mus_ref[0]))),
            np.std(mus_ref[0]),
        )
    )
    text.append(
        "Cosine {} = {:5e} ; {:5e} ; {:5e}".format(
            labels[1],
            np.mean(mus_ref[1]),
            np.std(mus_ref[1]) / np.sqrt(float(len(mus_ref[1]))),
            np.std(mus_ref[1]),
        )
    )
    text = "\n".join(text)

    # Make energy plot
    plt.hist(x=energies, bins=n_bins[0], label=labels, density=True, histtype="step")
    plt.xlabel("Energy [MeV]")
    plt.ylabel("PDF [1/MeV]")
    plt.title(title)
    plt.legend(loc="best")
    plt.tight_layout()
    plt.savefig(os.path.join(path, title + "-energy.pdf"))
    plt.close()

    # Make mu plot
    plt.hist(x=mus_ref, bins=n_bins[1], range=(-1.,1.), label=labels, density=True, histtype="step")
    plt.xlabel("Cosine Scattering Angle")
    plt.ylabel("PDF")
    plt.title(title)
    plt.legend(loc="best")
    plt.tight_layout()
    plt.savefig(os.path.join(path, title + "-angle.pdf"))
    plt.close()

    return text

def make_parser():
    text_description = "Read and compare sampled values generated by two codes"
    parser = argparse.ArgumentParser(
        description=text_description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    # define arguments
    parser.add_argument(
        "-r",
        dest="results",
        metavar="<results>",
        type=str,
        nargs=2,
        required=True,
        help="Two results files",
    )
    parser.add_argument(
        "--bins",
        metavar="bin",
        dest="bins",
        type=int,
        nargs=2,
        default=[100, 100],
        help="Number of bins (for E and mu) for the histogram plot",
    )
    parser.add_argument(
        "-l",
        "--labels",
        metavar="labels",
        dest="labels",
        type=str,
        nargs=2,
        default=["Code_1", "Code_2"],
        help="Labels of the results",
    )
    parser.add_argument(
        "--title",
        metavar="title",
        dest="title",
        type=str,
        default="Title",
        help="Graph title",
    )
    return parser


def main(raw_args=None):
    parser = make_parser()
    args = parser.parse_args(raw_args)

    n_bins = args.bins
    title = args.title
    labels = args.labels
    output_path = ""
    data_fnames = args.results 

    results_0 = np.load(data_fnames[0])
    results_1 = np.load(data_fnames[1])

    energies = []
    mus = []

    energies.append(results_0[0])
    energies.append(results_1[0])
    
    mus.append(results_0[1])
    mus.append(results_1[1])

    # Make plots, and get average and uncertainty
    txt = compare(energies, mus, n_bins, title, labels, output_path)

    # Do KS test on energy and angle
    statistic = [
        ks_2samp(energies[0], energies[1]).pvalue,
        ks_2samp(mus[0], mus[1]).pvalue,
    ]

    #  Write means and p-values
    with open(title + "-statistic.txt", "w") as m:
        print(txt, file=m)
        print("p-value(E); p-value(mu_lab)", file=m)
        print("{:.3f}; {:.3f}".format(*statistic), file=m)

    if statistic[0] > 0.05 and statistic[1] > 0.05:
        # Everything looks good
        return 0
    else:
        # Something is fishy in the statistics
        message = [
            "WARNING : A p-value was below 0.05",
            "Energy            : {:.3f}".format(statistic[0]),
            "Scattering Cosine : {:.3f}".format(statistic[1]),
            txt
        ]
        print()
        print("\n".join(message))
        print()
        return 1 

if __name__ == "__main__":
    main()
